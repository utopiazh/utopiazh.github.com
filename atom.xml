<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding For Fun]]></title>
  <link href="http://utopiazh.github.com/atom.xml" rel="self"/>
  <link href="http://utopiazh.github.com/"/>
  <updated>2013-03-10T09:47:02+08:00</updated>
  <id>http://utopiazh.github.com/</id>
  <author>
    <name><![CDATA[Hang Zhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multi-tenant of HBase in FaceBook]]></title>
    <link href="http://utopiazh.github.com/blog/2013/03/10/multi-tenancies-of-hbase-in-facebook/"/>
    <updated>2013-03-10T09:24:00+08:00</updated>
    <id>http://utopiazh.github.com/blog/2013/03/10/multi-tenancies-of-hbase-in-facebook</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>Watched the video for 2 times to get the main point, the highlights learned from this video is:
+ Use unique message id as ts to store into hbase
+ Use monitoring/reporting tools to know what exactly the access pattern is, while the app developers don&#8217;t know either
+ Use underlying hashout solution to isolate traffic, instead of an optimistic solution of using table names.</p>

<h1>HBase adoption</h1>

<h2>Messages:</h2>

<p><em>Requirements:</em>
- Very high volume (9B+ msg, 90B r+w ops per day), 4.5 PB no compressed.
- Elasticity &amp; auto-failover
- Strong consistency within a data centeer
- import large data set (old data)</p>

<p><em>Schema:</em>
- 3 CF (actions, snapshot (cache), keywords (search))
- Use message id as timestamp, which leverage the 3rd dimension.
- Fast iteration on schema 
    - Action logs are single source of truth
    - Most data during schema iteration from snapshot  and keywords
    - Custom backup solution (action logs), which could be replayed on schema evolving.</p>

<h2>ODS (Operational Data Store)</h2>

<ul>
<li>Schema: 3CFs, raw, hour, days</li>
<li>MR job to move data to buckets</li>
<li>Compaction tricks (leverage the time series to pick the right HFile to achieve more spatial locality)</li>
<li>Separating HBase clusters and its backing HDFS clusters proved not feasible</li>
<li>HA is essential (Master/Master cluster replication with MR jobs)</li>
</ul>


<h1>HBase best practices</h1>

<p><em>Process:</em>
Select the right apps: no five nines, etc.</p>

<p>Shadow testing before going production (real traffic goes in and out without noticed by users).</p>

<p><em>Schema Design</em>
One CF or Multiple CF: common issue is putting all data into one CF, so get poor spatial locality </p>

<p>New table or New CF: New CF provides better locality, e.g. users message and search, the best user experience is that all users data is complete available or down</p>

<p><em>Lessons:</em>
Need graph/reporting monitoring to provide insights
Constant upgrade (facebook is running HBase 0.89 with back-ported patches)</p>

<h1>Multi-Tenants</h1>

<p><em>optimistic multi-tenancies</em>
- let users do the right things
- lack of table naming rules</p>

<p><em>Hashout:</em>
- Was for Mysql, ported to support HBase
- review every app
- block abusive users, promote heave users
- users must provide app id and key, system app id to specific shard
- backed reading ops with memcached
- intensive MR job on separate cluster</p>

<h1>Reference</h1>

<ul>
<li><a href="vimeo.com/44715953" title="Multi-tenant HBase Solutions at Facebook">Nicolas Spiegelberg - Multi-tenant HBase Solutions at Facebook</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Ubuntu with Dual Monitor]]></title>
    <link href="http://utopiazh.github.com/blog/2013/03/10/configure-ubuntu-with-dual-monitor/"/>
    <updated>2013-03-10T09:11:00+08:00</updated>
    <id>http://utopiazh.github.com/blog/2013/03/10/configure-ubuntu-with-dual-monitor</id>
    <content type="html"><![CDATA[<h2>Goals:</h2>

<p>Setting ubuntu monitor like this:</p>

<pre><code>LCD with HDMI --&gt; Laptop Monitor
</code></pre>

<h2>Solutions:</h2>

<p>Create a xrandr script, named as <code>dual_monitor</code>:</p>

<pre><code>#!/bin/sh
if [ "$1" != "off" ]; then
  # External Screen as HDMI, Laptop below
  echo "Dual Screen on"
  xrandr --output VGA1 --off
  xrandr --output HDMI1 --primary --mode 1920x1080
  xrandr --output LVDS1 --off
  xrandr --output LVDS1 --mode 1600x900 --right-of HDMI1
else
  # External Screen off, Laptop primary
  echo "Dual Screen off"
  xrandr --output HDMI1 --off
  xrandr --output LVDS1 --primary --mode 1600x900
fi
</code></pre>

<p>To use it conveniently, add the directory into $PATH.</p>

<p>Start dual monitor mode with:</p>

<pre><code>dual_monitor
</code></pre>

<p>Stop dual monitor mode with:</p>

<pre><code>dual_monitor off
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="http://ubuntuforums.org/showthread.php?t=1801549" title="Setting primary monitor on dual display">AskUbuntu:&#8221;Setting primary monitor on dual display&#8221;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use octopress and github to write blog]]></title>
    <link href="http://utopiazh.github.com/blog/2013/01/13/how-to-use-octopress-and-github-to-write-blog/"/>
    <updated>2013-01-13T15:30:00+08:00</updated>
    <id>http://utopiazh.github.com/blog/2013/01/13/how-to-use-octopress-and-github-to-write-blog</id>
    <content type="html"><![CDATA[<p>Today spent about one hours to setup blogs on github, the main motivation is
to it&#8217;s code friendly.</p>

<p>The setup steps are:</p>

<h2> 1. Install Ruby With RVM </h2>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'># Update .zshrc and add one more line:
</span><span class='line'>source /etc/profile.d/rvm.sh
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>




<h2> 2. Setup Octopress </h2>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/github/
</span><span class='line'>git clone git://github.com/imathis/octopress.git username.github.com
</span><span class='line'>cd ~/github/username.github.com
</span><span class='line'>bundle update
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>




<h2> 3. Deploy as username.github.com </h2>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add username git@github.com:username/username.github.com.git
</span><span class='line'>rake setup_github_pages
</span><span class='line'># creaete a test post
</span><span class='line'>rake new_post["post title"]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>




<h2> 4. Commit the source </h2>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push -u username master
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>After setup, the publishing steps will be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["post title"]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>
</span><span class='line'>git commit -a -m "new post"
</span><span class='line'>git push username source</span></code></pre></td></tr></table></div></figure>


<p><strong>References:</strong><br/></p>

<ol>
<li>http://octopress.org/docs/setup/ </li>
<li>http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github</li>
<li>http://www.yangzhiping.com/tech/octopress.html</li>
</ol>



]]></content>
  </entry>
  
</feed>
